// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgres"
    url          = env("DATABASE_URL")
    directUrl    = env("DIRECT_URL")
    relationMode = "prisma"
}

model TMDBDetails {
    id             Int       @id
    imdbId         String?
    title          String
    overview       String
    poster         String?
    releaseDate    String
    runtime        Int
    certification  String?
    budget         Int
    revenue        BigInt
    openingWeekend Int       @default(0)
    popularity     Float
    rating         Float
    tagline        String
    genres         String[]
    keywords       String[]
    createdAt      DateTime  @default(now())
    updatedAt      DateTime?

    cast           TMDBCast[]
    crew           TMDBCrew[]
    studioFilms    StudioFilm[]
    filmBids       FilmBid[]
    activity       LeagueSessionActivity[]
    overlapAnswers OverlapAnswer[]
    polls          PollQuestion[]
}

model TMDBCast {
    id     String  @id @default(cuid())
    tmdbId Int
    name   String
    image  String?

    tmdb TMDBDetails @relation(fields: [tmdbId], references: [id])

    @@index([tmdbId])
}

model TMDBCrew {
    id         String  @id @default(cuid())
    tmdbId     Int
    name       String
    image      String?
    department String
    job        String

    tmdb TMDBDetails @relation(fields: [tmdbId], references: [id])

    @@index([tmdbId])
}

model League {
    id        String    @id @default(cuid())
    uuid      String    @unique @default(uuid())
    ownerId   String
    name      String
    public    Boolean   @default(false)
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?
    deletedAt DateTime?
    deletedBy String?

    owner    User               @relation("LeagueOwner", fields: [ownerId], references: [id])
    creator  User               @relation("LeagueCreator", fields: [createdBy], references: [id])
    updater  User?              @relation("LeagueUpdater", fields: [updatedBy], references: [id])
    deleter  User?              @relation("LeagueDeleter", fields: [deletedBy], references: [id])
    sessions LeagueSession[]
    members  LeagueMember[]
    invites  LeagueInvitation[]

    @@index([ownerId])
    @@index([createdBy])
    @@index([updatedBy])
    @@index([deletedBy])
}

model LeagueInvitation {
    id        String   @id @default(cuid())
    leagueId  String
    userId    String
    createdAt DateTime @default(now())
    status    String
    updatedBy String?

    league League @relation(fields: [leagueId], references: [id])
    user   User   @relation(fields: [userId], references: [id])

    @@index([leagueId])
    @@index([userId])
}

model LeagueMember {
    id       String  @id @default(cuid())
    leagueId String
    userId   String
    isAdmin  Boolean @default(false)

    league League @relation(fields: [leagueId], references: [id])
    user   User   @relation(fields: [userId], references: [id])

    @@unique([leagueId, userId])
    @@index([userId])
}

model LeagueSession {
    id        String   @id @default(cuid())
    leagueId  String
    name      String
    startDate DateTime
    endDate   DateTime
    settings  Json // @db.Text

    league   League                  @relation(fields: [leagueId], references: [id])
    studios  LeagueSessionStudio[]
    activity LeagueSessionActivity[]

    @@index([leagueId])
}

model LeagueSessionActivity {
    id        String   @id @default(cuid())
    sessionId String
    studioId  String?
    tmdbId    Int?
    type      String
    message   String
    timestamp DateTime

    session LeagueSession        @relation(fields: [sessionId], references: [id])
    studio  LeagueSessionStudio? @relation(fields: [studioId], references: [id])
    film    TMDBDetails?         @relation(fields: [tmdbId], references: [id])

    @@index([sessionId])
    @@index([studioId])
    @@index([tmdbId])
}

model LeagueSessionStudio {
    id        String    @id @default(cuid())
    sessionId String
    ownerId   String
    name      String
    image     String?
    score     Float     @default(0)
    budget    Int       @default(0)
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    updatedBy String?
    deletedAt DateTime?
    deletedBy String?

    session        LeagueSession           @relation(fields: [sessionId], references: [id])
    owner          User                    @relation("StudioOwner", fields: [ownerId], references: [id])
    updater        User?                   @relation("StudioUpdater", fields: [updatedBy], references: [id])
    deleter        User?                   @relation("StudioDeleter", fields: [deletedBy], references: [id])
    films          StudioFilm[]
    favorites      StudioFavorite[]
    bids           FilmBid[]
    tradesOffered  FilmTradeProposal[]     @relation("OfferingStudio")
    tradesReceived FilmTradeProposal[]     @relation("ReceivingStudio")
    activity       LeagueSessionActivity[]

    @@index([sessionId])
    @@index([ownerId])
    @@index([updatedBy])
    @@index([deletedBy])
}

model StudioFilm {
    id            String    @id @default(cuid())
    studioId      String
    tmdbId        Int
    slot          Int
    score         Float     @default(0)
    scoreOverride Int?
    acquiredType  String?
    acquiredAt    DateTime?
    droppedAt     DateTime?

    studio         LeagueSessionStudio @relation(fields: [studioId], references: [id])
    tmdb           TMDBDetails         @relation(fields: [tmdbId], references: [id])
    tradesOffered  FilmTradeProposal[] @relation("OfferingFilm")
    tradesReceived FilmTradeProposal[] @relation("ReceivingFilm")

    @@index([studioId])
    @@index([tmdbId])
}

model StudioFavorite {
    id       String @id @default(cuid())
    studioId String
    tmdbId   Int

    studio LeagueSessionStudio @relation(fields: [studioId], references: [id])

    @@unique([studioId, tmdbId])
    @@index([studioId])
}

model FilmBid {
    id        String   @id @default(cuid())
    studioId  String
    tmdbId    Int
    amount    Int
    slot      Int
    status    String
    createdAt DateTime @default(now())

    studio LeagueSessionStudio @relation(fields: [studioId], references: [id])
    tmdb   TMDBDetails         @relation(fields: [tmdbId], references: [id])

    @@unique([studioId, tmdbId, status])
    @@index([studioId])
    @@index([tmdbId])
}

model FilmTradeProposal {
    id                String    @id @default(cuid())
    offeringStudioId  String
    offeringFilmId    String
    offeringCash      Int
    receivingStudioId String
    receivingFilmId   String
    receivingCash     Int
    status            String
    createdAt         DateTime  @default(now())
    updatedAt         DateTime?
    updateBy          String

    offeringStudio  LeagueSessionStudio @relation("OfferingStudio", fields: [offeringStudioId], references: [id])
    offeringFilm    StudioFilm          @relation("OfferingFilm", fields: [offeringFilmId], references: [id])
    receivingStudio LeagueSessionStudio @relation("ReceivingStudio", fields: [receivingStudioId], references: [id])
    receivingFilm   StudioFilm          @relation("ReceivingFilm", fields: [receivingFilmId], references: [id])

    @@index([offeringStudioId])
    @@index([offeringFilmId])
    @@index([receivingStudioId])
    @@index([receivingFilmId])
}

model PollQuestion {
    id        String    @id @default(cuid())
    text      String
    tmdbId    Int?
    startDate DateTime?
    endDate   DateTime?

    film    TMDBDetails? @relation(fields: [tmdbId], references: [id])
    answers PollAnswer[]

    @@index([tmdbId])
}

model PollAnswer {
    id     String @id @default(cuid())
    pollId String
    text   String
    seq    Int

    question  PollQuestion   @relation(fields: [pollId], references: [id])
    responses PollResponse[]

    @@index([pollId])
}

model PollResponse {
    id       String @id @default(cuid())
    answerId String
    userId   String

    answer PollAnswer @relation(fields: [answerId], references: [id])
    user   User       @relation(fields: [userId], references: [id])

    @@index([answerId])
    @@index([userId])
}

model OverlapAnswer {
    id     String @id @default(cuid())
    date   String @unique()
    tmdbId Int

    tmdb    TMDBDetails     @relation(fields: [tmdbId], references: [id])
    results OverlapResult[]

    @@index([tmdbId])
}

model OverlapResult {
    id         String @id @default(cuid())
    answerId   String
    userId     String
    numGuesses Int

    answer OverlapAnswer @relation(fields: [answerId], references: [id])
    user   User          @relation(fields: [userId], references: [id])

    @@index([answerId])
    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    username      String?   @unique
    isAdmin       Boolean   @default(false)

    accounts          Account[]
    sessions          Session[]
    leaguesOwned      League[]              @relation("LeagueOwner")
    leagueMemberships LeagueMember[]
    leagueInvites     LeagueInvitation[]
    studiosOwned      LeagueSessionStudio[] @relation("StudioOwner")
    leaguesCreated    League[]              @relation("LeagueCreator")
    leaguesUpdated    League[]              @relation("LeagueUpdater")
    leaguesDeleted    League[]              @relation("LeagueDeleter")
    studiosUpdated    LeagueSessionStudio[] @relation("StudioUpdater")
    studiosDeleted    LeagueSessionStudio[] @relation("StudioDeleter")
    pollResponses     PollResponse[]
    overlapResults    OverlapResult[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
